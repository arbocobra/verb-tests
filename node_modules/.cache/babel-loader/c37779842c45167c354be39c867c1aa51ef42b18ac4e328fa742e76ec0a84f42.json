{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/QuestioBox.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBox = props => {\n  const {\n    questionIdArray,\n    filteredVerbs,\n    displayQuestion\n  } = props;\n\n  // const question = (verb) => {\n  //    return (\n  //       <div>\n  //          <p>{verb.fullP}</p>\n  //          <p>{verb.fullE}</p>\n  //       </div>\n  //    )\n  // }\n\n  if (displayQuestion) {\n    return (\n      /*#__PURE__*/\n      // <div>We have verbs</div>\n      _jsxDEV(\"div\", {\n        children: filteredVerbs.map(verb => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: verb.fullP\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 43\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 10\n      }, this)\n    );\n  } else return null;\n};\n_c = QuestionBox;\nexport default QuestionBox;\nvar _c;\n$RefreshReg$(_c, \"QuestionBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","jsxDEV","_jsxDEV","QuestionBox","props","questionIdArray","filteredVerbs","displayQuestion","children","map","verb","fullP","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/QuestioBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport _ from 'lodash'\n\nconst QuestionBox = (props) => {\n   const {questionIdArray, filteredVerbs, displayQuestion} = props\n\n   // const question = (verb) => {\n   //    return (\n   //       <div>\n   //          <p>{verb.fullP}</p>\n   //          <p>{verb.fullE}</p>\n   //       </div>\n   //    )\n   // }\n\n\n   if (displayQuestion) {\n      return (\n         // <div>We have verbs</div>\n         <div>{filteredVerbs.map(verb => (<p>{verb.fullP}</p>))}</div>\n      )\n   } else return null\n}\n\nexport default QuestionBox"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,CAAC,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC5B,MAAM;IAACC,eAAe;IAAEC,aAAa;IAAEC;EAAe,CAAC,GAAGH,KAAK;;EAE/D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,IAAIG,eAAe,EAAE;IAClB;MAAA;MACG;MACAL,OAAA;QAAAM,QAAA,EAAMF,aAAa,CAACG,GAAG,CAACC,IAAI,iBAAKR,OAAA;UAAAM,QAAA,EAAIE,IAAI,CAACC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;EAEnE,CAAC,MAAM,OAAO,IAAI;AACrB,CAAC;AAAAC,EAAA,GAnBKb,WAAW;AAqBjB,eAAeA,WAAW;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}