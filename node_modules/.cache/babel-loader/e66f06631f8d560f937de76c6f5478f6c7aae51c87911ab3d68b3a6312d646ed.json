{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/AltQuestionBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectShuffledIds, selectNextQuestion, setQuestion, addCorrect, addIncorrect, selectResultTally, selectFinalResults } from '../app/verbsSlice';\nimport Question from './Question';\nimport AltQuestion from './AltQuestion';\nimport Footer from './Footer';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AltQuestionBox = props => {\n  _s();\n  // const {questionIdArray, filteredVerbs, displayQuestion} = props\n  // const { filteredVerbs, displayQuestion } = props\n\n  // console.log(questionIdArray)\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [testComplete, setTestComplete] = useState(false);\n  const dispatch = useDispatch();\n  const currentQuestion = useSelector(selectNextQuestion);\n  const questionIdArray = useSelector(selectShuffledIds);\n  // const activeId = questionIdArray[activeIndex]\n\n  // useEffect(() => console.log('render'))\n\n  // const activeId = questionIdArray[activeIndex]\n\n  // const lastQuestion = useSelector(selectResultTally)\n  // const wrongAnswers = useSelector((state) => {\n  //    let wrong = state.verbs.questions.incorrectAnswers\n  //    let right = state.verbs.questions.correctAnswers\n  //    return `Right: ${right} // Wrong: ${wrong}`\n  //    // if (testComplete) return selectFinalResults\n  //    // else return null\n  // })\n\n  const handleAnswer = (bool, id) => {\n    dispatch(setQuestion(questionIdArray[activeIndex + 1]));\n    if (bool) dispatch(addCorrect(id));else dispatch(addIncorrect(id));\n    setActiveIndex(current => current + 1);\n\n    // if (lastQuestion) completeTest()\n    // else setActiveId((current) => current + 1)\n  };\n  const completeTest = event => {\n    console.log('boop');\n    // event.preventDefault()\n    // setTestComplete(true)\n    // console.log(wrongAnswers)\n  };\n\n  // const selectedVerb = (activeId) => { \n  //    return filteredVerbs.find(el => {\n  //       return el.id === activeId\n  //    }) \n  // }\n\n  // if (displayQuestion && !testComplete) {\n  //    // const activeId = questionIdArray[activeIndex]\n  //    return (\n  //       <>\n  //          <div id='question-box'>\n  //             <Question verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n  //          </div>\n  //          <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n  //       </>\n  //    )\n  // } else return null\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"test\",\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"question-box\",\n      children: /*#__PURE__*/_jsxDEV(AltQuestion, {\n        verb: currentQuestion,\n        index: activeIndex,\n        display: true,\n        handleAnswer: handleAnswer\n      }, activeIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      activeId: activeIndex,\n      testLength: questionIdArray.length,\n      completeTest: completeTest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n};\n_s(AltQuestionBox, \"6b4hjnDiR03DLR/yh2K4qXss658=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = AltQuestionBox;\nexport default AltQuestionBox;\nvar _c;\n$RefreshReg$(_c, \"AltQuestionBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","selectShuffledIds","selectNextQuestion","setQuestion","addCorrect","addIncorrect","selectResultTally","selectFinalResults","Question","AltQuestion","Footer","_","jsxDEV","_jsxDEV","AltQuestionBox","props","_s","activeIndex","setActiveIndex","testComplete","setTestComplete","dispatch","currentQuestion","questionIdArray","handleAnswer","bool","id","current","completeTest","event","console","log","className","children","verb","index","display","fileName","_jsxFileName","lineNumber","columnNumber","activeId","testLength","length","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/AltQuestionBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectShuffledIds, selectNextQuestion, setQuestion, addCorrect, addIncorrect, selectResultTally, selectFinalResults } from '../app/verbsSlice';\n\nimport Question from './Question';\nimport AltQuestion from './AltQuestion';\nimport Footer from './Footer';\n\nimport _ from 'lodash'\n\nconst AltQuestionBox = (props) => {\n   // const {questionIdArray, filteredVerbs, displayQuestion} = props\n   // const { filteredVerbs, displayQuestion } = props\n\n   // console.log(questionIdArray)\n\n   const [activeIndex, setActiveIndex] = useState(0)\n   const [testComplete, setTestComplete] = useState(false)\n\n   const dispatch = useDispatch()\n\n   const currentQuestion = useSelector(selectNextQuestion)\n   const questionIdArray = useSelector(selectShuffledIds)\n   // const activeId = questionIdArray[activeIndex]\n\n   // useEffect(() => console.log('render'))\n\n   // const activeId = questionIdArray[activeIndex]\n\n\n   // const lastQuestion = useSelector(selectResultTally)\n   // const wrongAnswers = useSelector((state) => {\n   //    let wrong = state.verbs.questions.incorrectAnswers\n   //    let right = state.verbs.questions.correctAnswers\n   //    return `Right: ${right} // Wrong: ${wrong}`\n   //    // if (testComplete) return selectFinalResults\n   //    // else return null\n   // })\n\n   const handleAnswer = (bool, id) => {\n      dispatch(setQuestion(questionIdArray[activeIndex + 1]))\n      if (bool) dispatch(addCorrect(id))   \n      else dispatch(addIncorrect(id))\n\n      setActiveIndex((current) => current + 1)\n      \n      // if (lastQuestion) completeTest()\n      // else setActiveId((current) => current + 1)\n   }\n\n   const completeTest = (event) => {\n      console.log('boop')\n      // event.preventDefault()\n      // setTestComplete(true)\n      // console.log(wrongAnswers)\n   }\n\n   // const selectedVerb = (activeId) => { \n   //    return filteredVerbs.find(el => {\n   //       return el.id === activeId\n   //    }) \n   // }\n\n   // if (displayQuestion && !testComplete) {\n   //    // const activeId = questionIdArray[activeIndex]\n   //    return (\n   //       <>\n   //          <div id='question-box'>\n   //             <Question verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n   //          </div>\n   //          <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n   //       </>\n   //    )\n   // } else return null\n   return (\n      <div id='test' className='test-container'>\n         <div id='question-box'>\n            <AltQuestion verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n         </div>\n         <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n      </div>\n   )\n}\n\nexport default AltQuestionBox"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,iBAAiB,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,UAAU,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,mBAAmB;AAEvJ,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAOC,CAAC,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,cAAc,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B;EACA;;EAEA;;EAEA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMyB,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAE9B,MAAMsB,eAAe,GAAGvB,WAAW,CAACG,kBAAkB,CAAC;EACvD,MAAMqB,eAAe,GAAGxB,WAAW,CAACE,iBAAiB,CAAC;EACtD;;EAEA;;EAEA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMuB,YAAY,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IAChCL,QAAQ,CAAClB,WAAW,CAACoB,eAAe,CAACN,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACvD,IAAIQ,IAAI,EAAEJ,QAAQ,CAACjB,UAAU,CAACsB,EAAE,CAAC,CAAC,MAC7BL,QAAQ,CAAChB,YAAY,CAACqB,EAAE,CAAC,CAAC;IAE/BR,cAAc,CAAES,OAAO,IAAKA,OAAO,GAAG,CAAC,CAAC;;IAExC;IACA;EACH,CAAC;EAED,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC7BC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB;IACA;IACA;EACH,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACGlB,OAAA;IAAKa,EAAE,EAAC,MAAM;IAACM,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBACtCpB,OAAA;MAAKa,EAAE,EAAC,cAAc;MAAAO,QAAA,eACnBpB,OAAA,CAACJ,WAAW;QAACyB,IAAI,EAAEZ,eAAgB;QAACa,KAAK,EAAElB,WAAY;QAACmB,OAAO,EAAE,IAAK;QAACZ,YAAY,EAAEA;MAAa,GAAMP,WAAW;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrH,CAAC,eACN3B,OAAA,CAACH,MAAM;MAAC+B,QAAQ,EAAExB,WAAY;MAACyB,UAAU,EAAEnB,eAAe,CAACoB,MAAO;MAACf,YAAY,EAAEA;IAAa;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/F,CAAC;AAEZ,CAAC;AAAAxB,EAAA,CAxEKF,cAAc;EAAA,QASAd,WAAW,EAEJD,WAAW,EACXA,WAAW;AAAA;AAAA6C,EAAA,GAZhC9B,cAAc;AA0EpB,eAAeA,cAAc;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}