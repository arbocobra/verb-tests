{"ast":null,"code":"import data from './../data/verb-init.js';\nimport _ from 'lodash';\n\n// const extractData = (verb, i) => {\n//    verb.fullP = `${verb.pronounP} ${verb.conjugationP}`\n//    verb.fullE = `${verb.pronounE} ${verb.conjugationE}`\n//    verb.id = i\n//    let objName = _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP])\n//    Verbs[objName] = verb\n// }\n\nconst createVerbObject = () => {\n  const Verbs = {};\n  for (const [index, verb] of data.entries()) {\n    const objectName = createObjectName(verb);\n    const objectData = extractData(verb, index);\n    Verbs[objectName] = objectData;\n  }\n  return Verbs;\n};\nconst createObjectName = verb => {\n  // let name = ''\n  // return name.concat(verb.tense, verb.infinitiveP, verb.pronounP)\n  return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP]);\n};\nconst extractData = (verb, i) => {\n  verb.fullP = `${verb.pronounP} ${verb.conjugationP}`;\n  verb.fullE = `${verb.pronounE} ${verb.conjugationE}`;\n  verb.id = i;\n  return verb;\n};\nexport default createVerbObject;","map":{"version":3,"names":["data","_","createVerbObject","Verbs","index","verb","entries","objectName","createObjectName","objectData","extractData","camelCase","tense","infinitiveP","pronounP","i","fullP","conjugationP","fullE","pronounE","conjugationE","id"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/functions/loadingFunctions.js"],"sourcesContent":["import data from './../data/verb-init.js'\nimport _ from 'lodash';\n\n// const extractData = (verb, i) => {\n//    verb.fullP = `${verb.pronounP} ${verb.conjugationP}`\n//    verb.fullE = `${verb.pronounE} ${verb.conjugationE}`\n//    verb.id = i\n//    let objName = _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP])\n//    Verbs[objName] = verb\n// }\n\nconst createVerbObject = () => {\n   const Verbs = {}\n   for (const [index, verb] of data.entries()) {\n       const objectName = createObjectName(verb)\n       const objectData = extractData(verb, index)\n       Verbs[objectName] = objectData\n  }\n   return Verbs\n}\n\nconst createObjectName = (verb) => {\n   // let name = ''\n   // return name.concat(verb.tense, verb.infinitiveP, verb.pronounP)\n  return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP])\n}\nconst extractData = (verb, i) => {\n  verb.fullP = `${verb.pronounP} ${verb.conjugationP}`\n  verb.fullE = `${verb.pronounE} ${verb.conjugationE}`\n  verb.id = i\n  return verb\n}\n\nexport default createVerbObject"],"mappings":"AAAA,OAAOA,IAAI,MAAM,wBAAwB;AACzC,OAAOC,CAAC,MAAM,QAAQ;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC5B,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,KAAK,MAAM,CAACC,KAAK,EAAEC,IAAI,CAAC,IAAIL,IAAI,CAACM,OAAO,CAAC,CAAC,EAAE;IACxC,MAAMC,UAAU,GAAGC,gBAAgB,CAACH,IAAI,CAAC;IACzC,MAAMI,UAAU,GAAGC,WAAW,CAACL,IAAI,EAAED,KAAK,CAAC;IAC3CD,KAAK,CAACI,UAAU,CAAC,GAAGE,UAAU;EACnC;EACC,OAAON,KAAK;AACf,CAAC;AAED,MAAMK,gBAAgB,GAAIH,IAAI,IAAK;EAChC;EACA;EACD,OAAOJ,CAAC,CAACU,SAAS,CAAC,CAACN,IAAI,CAACO,KAAK,EAAEP,IAAI,CAACQ,WAAW,EAAER,IAAI,CAACS,QAAQ,CAAC,CAAC;AACnE,CAAC;AACD,MAAMJ,WAAW,GAAGA,CAACL,IAAI,EAAEU,CAAC,KAAK;EAC/BV,IAAI,CAACW,KAAK,GAAG,GAAGX,IAAI,CAACS,QAAQ,IAAIT,IAAI,CAACY,YAAY,EAAE;EACpDZ,IAAI,CAACa,KAAK,GAAG,GAAGb,IAAI,CAACc,QAAQ,IAAId,IAAI,CAACe,YAAY,EAAE;EACpDf,IAAI,CAACgB,EAAE,GAAGN,CAAC;EACX,OAAOV,IAAI;AACb,CAAC;AAED,eAAeH,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}