{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const testSlice = createSlice({\n  name: 'verbs',\n  initialState: {\n    testVerbs: {},\n    shuffledIds: [],\n    correctAnswers: [],\n    incorrectAnswers: []\n  },\n  reducers: {\n    loadData: (state, action) => {\n      // console.log(state.verbs)\n      state.testVerbs = action.payload;\n      // state.shuffledIds = shuffleIndex()\n    }\n  }\n});\nexport const selectTestVerbs = state => {\n  const testVerbs = state.testVerbs;\n  return testVerbs;\n};\n// export const selectFilteredAllVerbs = (state) => {\n//   const allVerbs = state.verbs.allVerbs;\n//   const allTense = state.verbs.tenseSelection\n\n//   if (allTense[0] === 'all') return allVerbs\n//   else if (allTense.length === 0) return {}\n//   else {\n//     let filteredVerbs = {}\n//     for (let verb in allVerbs) {\n//       let isIncluded = allTense.includes(allVerbs[verb].tense)\n//       if (isIncluded) filteredVerbs[verb] = allVerbs[verb]\n//     }\n//     return filteredVerbs\n//   }\n\n// };\n\nexport const {\n  loadData\n} = testSlice.actions;\nexport default testSlice.reducer;","map":{"version":3,"names":["createSlice","testSlice","name","initialState","testVerbs","shuffledIds","correctAnswers","incorrectAnswers","reducers","loadData","state","action","payload","selectTestVerbs","actions","reducer"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/app/testSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const testSlice = createSlice({\n   name: 'verbs',\n   initialState: {\n      testVerbs: {},\n      shuffledIds: [],\n      correctAnswers: [],\n      incorrectAnswers: []\n   },\n   reducers: {\n      loadData: (state, action) => {\n        // console.log(state.verbs)\n        state.testVerbs = action.payload\n        // state.shuffledIds = shuffleIndex()\n      },\n   }\n})\nexport const selectTestVerbs = (state) => {\n  const testVerbs = state.testVerbs\n  return testVerbs\n}\n// export const selectFilteredAllVerbs = (state) => {\n//   const allVerbs = state.verbs.allVerbs;\n//   const allTense = state.verbs.tenseSelection\n\n//   if (allTense[0] === 'all') return allVerbs\n//   else if (allTense.length === 0) return {}\n//   else {\n//     let filteredVerbs = {}\n//     for (let verb in allVerbs) {\n//       let isIncluded = allTense.includes(allVerbs[verb].tense)\n//       if (isIncluded) filteredVerbs[verb] = allVerbs[verb]\n//     }\n//     return filteredVerbs\n//   }\n  \n// };\n\nexport const { loadData } = testSlice.actions;\n\nexport default testSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAClCE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACXC,SAAS,EAAE,CAAC,CAAC;IACbC,WAAW,EAAE,EAAE;IACfC,cAAc,EAAE,EAAE;IAClBC,gBAAgB,EAAE;EACrB,CAAC;EACDC,QAAQ,EAAE;IACPC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B;MACAD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;MAChC;IACF;EACH;AACH,CAAC,CAAC;AACF,OAAO,MAAMC,eAAe,GAAIH,KAAK,IAAK;EACxC,MAAMN,SAAS,GAAGM,KAAK,CAACN,SAAS;EACjC,OAAOA,SAAS;AAClB,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAM;EAAEK;AAAS,CAAC,GAAGR,SAAS,CAACa,OAAO;AAE7C,eAAeb,SAAS,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}