{"ast":null,"code":"import data from'./../data/verb-init.js';import _ from'lodash';export const createVerbObject=()=>{const Verbs={};for(const[index,verb]of data.entries()){const objectName=createObjectName(verb);if(_.has(verb,'id')){Verbs[objectName]=verb;}else{const objectData=extractData(verb,index);Verbs[objectName]=objectData;}}return Verbs;};const createObjectName=verb=>{if(verb.innerId>51)return _.camelCase([verb.tense,verb.infinitiveP,verb.pronounP,'neg']);else return _.camelCase([verb.tense,verb.infinitiveP,verb.pronounP]);};const extractData=(verb,i)=>{if(verb.tense==='imperative'){verb.fullP=\"\".concat(verb.conjugationP,\" \").concat(verb.pronounP,\"!\");verb.fullE=\"\".concat(verb.conjugationE,\"!\");}else{verb.fullP=\"\".concat(verb.pronounP,\" \").concat(verb.conjugationP);verb.fullE=\"\".concat(verb.pronounE,\" \").concat(verb.conjugationE);}verb.id=i;return verb;};export const filterSelectedVerbTense=(tense,verbs)=>{let filteredVerbs=[];if(tense.length===0)return filteredVerbs;else if(tense[0]==='all'){for(let verb in verbs){filteredVerbs.push(verbs[verb]);}return filteredVerbs;}else{for(let verb in verbs){let isIncluded=tense.includes(verbs[verb].tense);if(isIncluded)filteredVerbs.push(verbs[verb]);}return filteredVerbs;}};export const shuffleVerbIds=verbs=>{let array=verbs.map(verb=>verb.id);for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]];}return array;};","map":{"version":3,"names":["data","_","createVerbObject","Verbs","index","verb","entries","objectName","createObjectName","has","objectData","extractData","innerId","camelCase","tense","infinitiveP","pronounP","i","fullP","concat","conjugationP","fullE","conjugationE","pronounE","id","filterSelectedVerbTense","verbs","filteredVerbs","length","push","isIncluded","includes","shuffleVerbIds","array","map","j","Math","floor","random"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/functions/loadingFunctions.js"],"sourcesContent":["import data from './../data/verb-init.js'\nimport _ from 'lodash';\n\nexport const createVerbObject = () => {\n   const Verbs = {}\n   for (const [index, verb] of data.entries()) {\n       const objectName = createObjectName(verb)\n      if (_.has(verb, 'id')) {\n        Verbs[objectName] = verb\n      } else {\n        const objectData = extractData(verb, index)\n        Verbs[objectName] = objectData\n      }\n      \n  }\n   return Verbs\n}\n\nconst createObjectName = (verb) => {\n  if (verb.innerId > 51) return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP, 'neg'])\n  else return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP])\n}\nconst extractData = (verb, i) => {\n  if (verb.tense === 'imperative') {\n    verb.fullP = `${verb.conjugationP} ${verb.pronounP}!`\n    verb.fullE = `${verb.conjugationE}!`\n  } else {\n    verb.fullP = `${verb.pronounP} ${verb.conjugationP}`\n    verb.fullE = `${verb.pronounE} ${verb.conjugationE}`\n  }\n  verb.id = i\n  return verb\n}\n\nexport const filterSelectedVerbTense = (tense, verbs) => {\n  let filteredVerbs = []\n  if (tense.length === 0) return filteredVerbs\n  else if (tense[0] === 'all') {\n    for (let verb in verbs) {\n      filteredVerbs.push(verbs[verb])\n    }\n    return filteredVerbs\n  }\n  else {    \n    for (let verb in verbs) {\n      let isIncluded = tense.includes(verbs[verb].tense)\n      if (isIncluded) filteredVerbs.push(verbs[verb])\n    }\n    return filteredVerbs\n  }\n}\n\nexport const shuffleVerbIds = (verbs) => {\n  let array = verbs.map(verb => verb.id)\n  for (let i = array.length - 1; i > 0; i-- ) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]; \n }\n return array\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}