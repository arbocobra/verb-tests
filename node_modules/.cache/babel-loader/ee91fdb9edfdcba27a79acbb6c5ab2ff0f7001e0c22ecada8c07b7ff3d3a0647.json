{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Verbs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\nimport createVerbObject from '../functions/loadingFunctions';\nimport Selection from './Selection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Verbs = () => {\n  _s();\n  const dispatch = useDispatch();\n  const isFirstRender = useRef(true);\n  const onFirstRender = () => {\n    dispatch(loadData(createVerbObject()));\n    isFirstRender.current = false;\n  };\n\n  // const [selectedTense, setSelectedTense] = useState(['all'])\n  // const [isAll, setIsAll] = useState(true)\n\n  // const dispatch = useDispatch();\n  // const allVerbs = useSelector(selectFilteredAllVerbs);\n\n  // const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative'])\n  // const isFirstRender = useRef(true)\n\n  // const onFirstRender = () => {\n  //    dispatch(loadData(createVerbObject()));\n  //    isFirstRender.current = false\n  // }\n\n  // useEffect(() => {\n  //    if (!isFirstRender.current) {\n  //       console.log(isAll)\n  //       if (isAll) {\n  //          let divArr = document.getElementsByClassName('auto-checkbox')\n  //          for (let div of divArr) {\n  //             div.checked = false\n  //          }\n  //       }\n  //    }\n  // }, [isAll])\n\n  // useEffect(() => {\n  //    if (!isFirstRender.current) {\n  //       console.log(selectedTense)\n  //    }\n  // }, [selectedTense])\n\n  useEffect(onFirstRender, []);\n\n  // const checkHandler = (e) => {\n  //    let val = e.target.value\n  //    let isSelected = e.target.checked\n  //    let arr = [...selectedTense]\n\n  //    if (val === 'all') {\n  //       setIsAll(current => !current)\n  //       if (isSelected) setSelectedTense(['all'])\n  //       else arr = [...arr].filter(el => el !== 'all')         \n  //    } else {\n  //       if (isSelected) {\n  //          arr = [...arr].filter(el => el !== 'all')\n  //          arr.push(val)\n  //          setIsAll(false)\n  //       } else arr = [...arr].filter(el => el !== val)\n  //       setSelectedTense(arr)\n  //    }\n  // }\n\n  // const submitTense = () => dispatch(selectTense(selectedTense))\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Hello there!\", /*#__PURE__*/_jsxDEV(Selection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n};\n_s(Verbs, \"zrcITG2lgTWhVNMbUIL4YRizaI4=\", false, function () {\n  return [useDispatch];\n});\n_c = Verbs;\nexport default Verbs;\nvar _c;\n$RefreshReg$(_c, \"Verbs\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","loadData","selectTense","selectFilteredAllVerbs","createVerbObject","Selection","jsxDEV","_jsxDEV","Verbs","_s","dispatch","isFirstRender","onFirstRender","current","children","fileName","_jsxFileName","lineNumber","columnNumber","Test","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Verbs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash'\n\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\n\nimport createVerbObject from '../functions/loadingFunctions';\nimport Selection from './Selection';\n\nconst Verbs = () => {\n   const dispatch = useDispatch();\n\n   const isFirstRender = useRef(true)\n\n   const onFirstRender = () => {\n      dispatch(loadData(createVerbObject()));\n      isFirstRender.current = false\n   }\n   \n   // const [selectedTense, setSelectedTense] = useState(['all'])\n   // const [isAll, setIsAll] = useState(true)\n\n   // const dispatch = useDispatch();\n   // const allVerbs = useSelector(selectFilteredAllVerbs);\n\n   // const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative'])\n   // const isFirstRender = useRef(true)\n \n   // const onFirstRender = () => {\n   //    dispatch(loadData(createVerbObject()));\n   //    isFirstRender.current = false\n   // }\n\n   // useEffect(() => {\n   //    if (!isFirstRender.current) {\n   //       console.log(isAll)\n   //       if (isAll) {\n   //          let divArr = document.getElementsByClassName('auto-checkbox')\n   //          for (let div of divArr) {\n   //             div.checked = false\n   //          }\n   //       }\n   //    }\n   // }, [isAll])\n\n   // useEffect(() => {\n   //    if (!isFirstRender.current) {\n   //       console.log(selectedTense)\n   //    }\n   // }, [selectedTense])\n\n   useEffect(onFirstRender, []);\n\n   \n\n   // const checkHandler = (e) => {\n   //    let val = e.target.value\n   //    let isSelected = e.target.checked\n   //    let arr = [...selectedTense]\n\n   //    if (val === 'all') {\n   //       setIsAll(current => !current)\n   //       if (isSelected) setSelectedTense(['all'])\n   //       else arr = [...arr].filter(el => el !== 'all')         \n   //    } else {\n   //       if (isSelected) {\n   //          arr = [...arr].filter(el => el !== 'all')\n   //          arr.push(val)\n   //          setIsAll(false)\n   //       } else arr = [...arr].filter(el => el !== val)\n   //       setSelectedTense(arr)\n   //    }\n   // }\n\n   // const submitTense = () => dispatch(selectTense(selectedTense))\n\n   return (\n      <div>\n         Hello there!\n         <Selection />\n         <Test />\n      </div>\n   )\n}\n\nexport default Verbs"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,CAAC,MAAM,QAAQ;AAEtB,SAASC,QAAQ,EAAEC,WAAW,EAAEC,sBAAsB,QAAQ,mBAAmB;AAEjF,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,aAAa,GAAGd,MAAM,CAAC,IAAI,CAAC;EAElC,MAAMe,aAAa,GAAGA,CAAA,KAAM;IACzBF,QAAQ,CAACT,QAAQ,CAACG,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACtCO,aAAa,CAACE,OAAO,GAAG,KAAK;EAChC,CAAC;;EAED;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEAjB,SAAS,CAACgB,aAAa,EAAE,EAAE,CAAC;;EAI5B;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBACGL,OAAA;IAAAO,QAAA,GAAK,cAEF,eAAAP,OAAA,CAACF,SAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbX,OAAA,CAACY,IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEZ,CAAC;AAAAT,EAAA,CA1EKD,KAAK;EAAA,QACST,WAAW;AAAA;AAAAqB,EAAA,GADzBZ,KAAK;AA4EX,eAAeA,KAAK;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}