{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Verbs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\nimport createVerbObject from '../functions/loadingFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Verbs = () => {\n  _s();\n  const allVerbs = useSelector(selectFilteredAllVerbs);\n  // const dispatch = useDispatch();\n\n  const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative']);\n  const isFirstRender = useRef(true);\n  const [selectedTense, setSelectedTense] = useState(['all']);\n  const [isAll, setIsAll] = useState(true);\n\n  // const onFirstRender = () => {\n  //    // console.log('something dispatched')\n  //    dispatch(loadData(createVerbObject()));\n  //    isFirstRender.current = false\n  // }\n\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      console.log(isAll);\n      if (isAll) {\n        let divArr = document.getElementsByClassName('auto-checkbox');\n        for (let div of divArr) {\n          div.checked = false;\n        }\n      }\n    }\n  }, [isAll]);\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      console.log(selectedTense);\n    }\n  }, [selectedTense]);\n\n  // useEffect(onFirstRender, []);\n\n  useEffect(() => isFirstRender.current = false, []);\n  const checkHandler = e => {\n    let val = e.target.value;\n    let isSelected = e.target.checked;\n    let arr = [...selectedTense];\n    if (val === 'all') {\n      setIsAll(current => !current);\n      if (isSelected) setSelectedTense(['all']);else arr = [...arr].filter(el => el !== 'all');\n    } else {\n      if (isSelected) {\n        arr = [...arr].filter(el => el !== 'all');\n        arr.push(val);\n        setIsAll(false);\n      } else arr = [...arr].filter(el => el !== val);\n      setSelectedTense(arr);\n    }\n  };\n  const submitTense = () => dispatch(selectTense(selectedTense));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Hello there!\", /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"tense0\",\n          value: \"all\",\n          onChange: checkHandler,\n          checked: isAll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"tense0\",\n          children: \" All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), tenseSelection.current.map((tense, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"tense-checkbox, auto-checkbox\",\n          type: \"checkbox\",\n          id: `tense${i + 1}`,\n          value: tense,\n          onChange: checkHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `tense${i}`,\n          children: [\" \", _.upperFirst(tense)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 19\n        }, this)]\n      }, `checkbox${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"Ready\",\n          onClick: submitTense\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 7\n  }, this);\n};\n_s(Verbs, \"2wxBjgAcMV/DUA/KDJnE3Iveprk=\", false, function () {\n  return [useSelector];\n});\n_c = Verbs;\nexport default Verbs;\nvar _c;\n$RefreshReg$(_c, \"Verbs\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","loadData","selectTense","selectFilteredAllVerbs","createVerbObject","jsxDEV","_jsxDEV","Verbs","_s","allVerbs","tenseSelection","isFirstRender","selectedTense","setSelectedTense","isAll","setIsAll","current","console","log","divArr","document","getElementsByClassName","div","checked","checkHandler","e","val","target","value","isSelected","arr","filter","el","push","submitTense","dispatch","children","type","id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","map","tense","i","className","upperFirst","onClick","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Verbs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash'\n\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\n\nimport createVerbObject from '../functions/loadingFunctions';\n\nconst Verbs = () => {\n   const allVerbs = useSelector(selectFilteredAllVerbs);\n   // const dispatch = useDispatch();\n\n   const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative'])\n   const isFirstRender = useRef(true)\n   const [selectedTense, setSelectedTense] = useState(['all'])\n   const [isAll, setIsAll] = useState(true)\n \n   // const onFirstRender = () => {\n   //    // console.log('something dispatched')\n   //    dispatch(loadData(createVerbObject()));\n   //    isFirstRender.current = false\n   // }\n\n   useEffect(() => {\n      if (!isFirstRender.current) {\n         console.log(isAll)\n         if (isAll) {\n            let divArr = document.getElementsByClassName('auto-checkbox')\n            for (let div of divArr) {\n               div.checked = false\n            }\n         }\n      }\n   }, [isAll])\n\n   useEffect(() => {\n      if (!isFirstRender.current) {\n         console.log(selectedTense)\n      }\n   }, [selectedTense])\n\n   // useEffect(onFirstRender, []);\n\n   useEffect(() => isFirstRender.current = false, [])\n\n   const checkHandler = (e) => {\n      let val = e.target.value\n      let isSelected = e.target.checked\n      let arr = [...selectedTense]\n\n      if (val === 'all') {\n         setIsAll(current => !current)\n         if (isSelected) setSelectedTense(['all'])\n         else arr = [...arr].filter(el => el !== 'all')         \n      } else {\n         if (isSelected) {\n            arr = [...arr].filter(el => el !== 'all')\n            arr.push(val)\n            setIsAll(false)\n         } else arr = [...arr].filter(el => el !== val)\n         setSelectedTense(arr)\n      }\n   }\n\n   const submitTense = () => dispatch(selectTense(selectedTense))\n\n   return (\n      <div>\n         Hello there!\n\n         <form>\n            <div>\n               <input type='checkbox' id='tense0' value='all' onChange={checkHandler} checked={isAll} />\n               <label htmlFor='tense0'> All</label>\n            </div>\n            {tenseSelection.current.map((tense, i) => (\n               <div key={`checkbox${i}`}>\n                  <input className='tense-checkbox, auto-checkbox' type='checkbox' id={`tense${i + 1}`} value={tense} onChange={checkHandler} />\n                  <label htmlFor={`tense${i}`}> {_.upperFirst(tense)}</label>\n               </div>\n            ))}\n            <div><input type='button' value='Ready' onClick={submitTense} /></div>\n         </form>\n         {/* {Object.keys(allVerbs).map(el => (<p>{el}</p>))} */}\n      </div>\n   )\n}\n\nexport default Verbs"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}