{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useSelector,useDispatch}from'react-redux';import{startTest}from'../app/verbsSlice';import Selection from'./Selection';import Test from'./Test';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Verbs=()=>{const dispatch=useDispatch();// const [selectedTense, setSelectedTense] = useState(['all'])\n// const selectedTenseRef = useRef()\nconst[displayQuestion,setDisplayQuestion]=useState(false);const isFirstRender=useRef(true);// const onFirstRender = () => isFirstRender.current = false\nconst onFirstRender=()=>console.log('first render: Verbs');useEffect(()=>onFirstRender(),[]);const updatePage=()=>{document.getElementById('selection').classList.add('hidden');setDisplayQuestion(true);};// const submitTense = () => {\n//    selectedTenseRef.current = selectedTense\n//    dispatch(startTest(selectedTenseRef.current))\n//    document.getElementById('selection').classList.add('hidden')\n//    setDisplayQuestion(true)\n// }\nreturn/*#__PURE__*/_jsxs(\"div\",{id:\"verbs\",children:[/*#__PURE__*/_jsx(Selection,{updatePage:updatePage}),/*#__PURE__*/_jsx(Test,{displayQuestion:displayQuestion})]});};export default Verbs;","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","startTest","Selection","Test","jsx","_jsx","jsxs","_jsxs","Verbs","dispatch","displayQuestion","setDisplayQuestion","isFirstRender","onFirstRender","console","log","updatePage","document","getElementById","classList","add","id","children"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/components/Verbs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { startTest } from '../app/verbsSlice';\n\nimport Selection from './Selection';\nimport Test from './Test';\n\nconst Verbs = () => {\n   const dispatch = useDispatch();\n   // const [selectedTense, setSelectedTense] = useState(['all'])\n   // const selectedTenseRef = useRef()\n   const [displayQuestion, setDisplayQuestion] = useState(false)\n\n   const isFirstRender = useRef(true)\n   // const onFirstRender = () => isFirstRender.current = false\n   const onFirstRender = () => console.log('first render: Verbs')\n   \n   useEffect(() => onFirstRender(), []);\n\n   const updatePage = () => {\n      document.getElementById('selection').classList.add('hidden')\n      setDisplayQuestion(true)\n   }\n\n   // const submitTense = () => {\n   //    selectedTenseRef.current = selectedTense\n   //    dispatch(startTest(selectedTenseRef.current))\n   //    document.getElementById('selection').classList.add('hidden')\n   //    setDisplayQuestion(true)\n   // }\n\n   return (\n      <div id='verbs'>\n         {/* Hello there! */}\n         {/* <Selection submitTense={submitTense} selectedTense={selectedTense} setSelectedTense={setSelectedTense} /> */}\n         <Selection updatePage={updatePage} />\n         <Test displayQuestion={displayQuestion}  />\n      </div>\n   )\n}\n\nexport default Verbs"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CAEtD,OAASC,SAAS,KAAQ,mBAAmB,CAE7C,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,KAAM,CAAAC,KAAK,CAAGA,CAAA,GAAM,CACjB,KAAM,CAAAC,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC9B;AACA;AACA,KAAM,CAACU,eAAe,CAAEC,kBAAkB,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CAE7D,KAAM,CAAAgB,aAAa,CAAGd,MAAM,CAAC,IAAI,CAAC,CAClC;AACA,KAAM,CAAAe,aAAa,CAAGA,CAAA,GAAMC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAE9DlB,SAAS,CAAC,IAAMgB,aAAa,CAAC,CAAC,CAAE,EAAE,CAAC,CAEpC,KAAM,CAAAG,UAAU,CAAGA,CAAA,GAAM,CACtBC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC,CAC5DT,kBAAkB,CAAC,IAAI,CAAC,CAC3B,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AAEA,mBACGJ,KAAA,QAAKc,EAAE,CAAC,OAAO,CAAAC,QAAA,eAGZjB,IAAA,CAACH,SAAS,EAACc,UAAU,CAAEA,UAAW,CAAE,CAAC,cACrCX,IAAA,CAACF,IAAI,EAACO,eAAe,CAAEA,eAAgB,CAAG,CAAC,EACzC,CAAC,CAEZ,CAAC,CAED,cAAe,CAAAF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}