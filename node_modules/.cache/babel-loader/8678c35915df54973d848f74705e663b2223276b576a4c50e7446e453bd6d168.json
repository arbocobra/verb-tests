{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/QuestioBox.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBox = props => {\n  const {\n    questionIdArray,\n    filteredVerbs,\n    displayQuestion\n  } = props;\n  const QuestionArray = () => {\n    questionIdArray.map(index => {\n      let verb = filteredVerbs.find(el => el.id === index);\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: verb.fullP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 20\n      }, this);\n    });\n\n    // return (\n\n    //       <div>\n    //          <p>{verb.fullP}</p>\n    //          <p>{verb.fullE}</p>\n    //       </div>\n    // )\n  };\n  if (displayQuestion) {\n    return (\n      /*#__PURE__*/\n      // <div>We have verbs</div>\n      _jsxDEV(\"div\", {\n        children: QuestionArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 10\n      }, this)\n    );\n  } else return null;\n};\n_c = QuestionBox;\nexport default QuestionBox;\nvar _c;\n$RefreshReg$(_c, \"QuestionBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","jsxDEV","_jsxDEV","QuestionBox","props","questionIdArray","filteredVerbs","displayQuestion","QuestionArray","map","index","verb","find","el","id","children","fullP","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/QuestioBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport _ from 'lodash'\n\nconst QuestionBox = (props) => {\n   const {questionIdArray, filteredVerbs, displayQuestion} = props\n\n   const QuestionArray = () => {\n      questionIdArray.map(index => {\n            let verb = filteredVerbs.find(el => el.id === index)\n            return <p>{verb.fullP}</p>\n         })\n      \n      // return (\n         \n   //       <div>\n   //          <p>{verb.fullP}</p>\n   //          <p>{verb.fullE}</p>\n   //       </div>\n      // )\n   }\n\n\n   if (displayQuestion) {\n      return (\n         // <div>We have verbs</div>\n         <div>{QuestionArray}</div>\n      )\n   } else return null\n}\n\nexport default QuestionBox"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,CAAC,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC5B,MAAM;IAACC,eAAe;IAAEC,aAAa;IAAEC;EAAe,CAAC,GAAGH,KAAK;EAE/D,MAAMI,aAAa,GAAGA,CAAA,KAAM;IACzBH,eAAe,CAACI,GAAG,CAACC,KAAK,IAAI;MACvB,IAAIC,IAAI,GAAGL,aAAa,CAACM,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACC,EAAE,KAAKJ,KAAK,CAAC;MACpD,oBAAOR,OAAA;QAAAa,QAAA,EAAIJ,IAAI,CAACK;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAC7B,CAAC,CAAC;;IAEL;;IAEH;IACA;IACA;IACA;IACG;EACH,CAAC;EAGD,IAAIb,eAAe,EAAE;IAClB;MAAA;MACG;MACAL,OAAA;QAAAa,QAAA,EAAMP;MAAa;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;EAEhC,CAAC,MAAM,OAAO,IAAI;AACrB,CAAC;AAAAC,EAAA,GAzBKlB,WAAW;AA2BjB,eAAeA,WAAW;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}