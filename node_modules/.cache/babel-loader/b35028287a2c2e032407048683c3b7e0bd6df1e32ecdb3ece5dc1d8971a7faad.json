{"ast":null,"code":"import data from './../data/verb-init.js';\nimport _ from 'lodash';\nexport const createVerbObject = () => {\n  const Verbs = {};\n  for (const [index, verb] of data.entries()) {\n    const objectName = createObjectName(verb);\n    const objectData = extractData(verb, index);\n    Verbs[objectName] = objectData;\n  }\n  return Verbs;\n};\nconst createObjectName = verb => {\n  if (verb.innerId > 51) return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP, 'neg']);else return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP]);\n};\nconst extractData = (verb, i) => {\n  if (verb.tense === 'imperative') {\n    verb.fullP = `${verb.conjugationP} ${verb.pronounP}!`;\n    verb.fullE = `${verb.conjugationE}!`;\n  } else {\n    verb.fullP = `${verb.pronounP} ${verb.conjugationP}`;\n    verb.fullE = `${verb.pronounE} ${verb.conjugationE}`;\n  }\n  verb.id = i;\n  return verb;\n};\nexport const filterSelectedVerbTense = (tense, verbs) => {\n  if (tense[0] === 'all') return verbs;else if (tense.length === 0) return {};else {\n    // let filteredVerbs = {}\n    let filteredVerbs = [];\n    for (let verb in verbs) {\n      let isIncluded = tense.includes(verbs[verb].tense);\n      // if (isIncluded) filteredVerbs[verb] = verbs[verb]\n      if (isIncluded) filteredVerbs.push(verbs[verb]);\n    }\n    return filteredVerbs;\n  }\n};\nexport const shuffleVerbIds = verbs => {\n  // let array = []\n  // for (let verb in verbs) {\n  //   array.push(verbs[verb].id)\n  // } \n  let array = verbs.map(verb => verb.id);\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};","map":{"version":3,"names":["data","_","createVerbObject","Verbs","index","verb","entries","objectName","createObjectName","objectData","extractData","innerId","camelCase","tense","infinitiveP","pronounP","i","fullP","conjugationP","fullE","conjugationE","pronounE","id","filterSelectedVerbTense","verbs","length","filteredVerbs","isIncluded","includes","push","shuffleVerbIds","array","map","j","Math","floor","random"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/functions/loadingFunctions.js"],"sourcesContent":["import data from './../data/verb-init.js'\nimport _ from 'lodash';\n\nexport const createVerbObject = () => {\n   const Verbs = {}\n   for (const [index, verb] of data.entries()) {\n       const objectName = createObjectName(verb)\n       const objectData = extractData(verb, index)\n       Verbs[objectName] = objectData\n  }\n   return Verbs\n}\n\nconst createObjectName = (verb) => {\n  if (verb.innerId > 51) return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP, 'neg'])\n  else return _.camelCase([verb.tense, verb.infinitiveP, verb.pronounP])\n}\nconst extractData = (verb, i) => {\n  if (verb.tense === 'imperative') {\n    verb.fullP = `${verb.conjugationP} ${verb.pronounP}!`\n    verb.fullE = `${verb.conjugationE}!`\n  } else {\n    verb.fullP = `${verb.pronounP} ${verb.conjugationP}`\n    verb.fullE = `${verb.pronounE} ${verb.conjugationE}`\n  }\n  verb.id = i\n  return verb\n}\n\nexport const filterSelectedVerbTense = (tense, verbs) => {\n  if (tense[0] === 'all') return verbs\n  else if (tense.length === 0) return {}\n  else {\n    // let filteredVerbs = {}\n    let filteredVerbs = []\n    for (let verb in verbs) {\n      let isIncluded = tense.includes(verbs[verb].tense)\n      // if (isIncluded) filteredVerbs[verb] = verbs[verb]\n      if (isIncluded) filteredVerbs.push(verbs[verb])\n    }\n    return filteredVerbs\n  }\n}\n\nexport const shuffleVerbIds = (verbs) => {\n  // let array = []\n  // for (let verb in verbs) {\n  //   array.push(verbs[verb].id)\n  // } \n  let array = verbs.map(verb => verb.id)\n  for (let i = array.length - 1; i > 0; i-- ) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]; \n }\n return array\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}