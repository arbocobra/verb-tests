{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/AltQuestionBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addCorrect, addIncorrect, selectResultTally, selectFinalResults } from '../app/verbsSlice';\nimport Question from './Question';\nimport Footer from './Footer';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AltQuestionBox = props => {\n  _s();\n  const {\n    questionIdArray,\n    filteredVerbs,\n    displayQuestion\n  } = props;\n  console.log(questionIdArray);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [testComplete, setTestComplete] = useState(false);\n  const dispatch = useDispatch();\n\n  // const activeId = questionIdArray[activeIndex]\n\n  // const lastQuestion = useSelector(selectResultTally)\n  // const wrongAnswers = useSelector((state) => {\n  //    let wrong = state.verbs.questions.incorrectAnswers\n  //    let right = state.verbs.questions.correctAnswers\n  //    return `Right: ${right} // Wrong: ${wrong}`\n  //    // if (testComplete) return selectFinalResults\n  //    // else return null\n  // })\n\n  const handleAnswer = (bool, id) => {\n    if (bool) dispatch(addCorrect(id));else dispatch(addIncorrect(id));\n    setActiveIndex(current => current + 1);\n\n    // if (lastQuestion) completeTest()\n    // else setActiveId((current) => current + 1)\n  };\n  const completeTest = event => {\n    console.log('boop');\n    // event.preventDefault()\n    // setTestComplete(true)\n    // console.log(wrongAnswers)\n  };\n  const selectedVerb = activeId => {\n    return filteredVerbs.find(el => {\n      return el.id === activeId;\n    });\n  };\n  if (displayQuestion && !testComplete) {\n    const activeId = questionIdArray[activeIndex];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"question-box\",\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          verb: selectedVerb(activeId),\n          index: activeIndex,\n          display: true,\n          handleAnswer: handleAnswer\n        }, activeIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        activeId: activeIndex,\n        testLength: questionIdArray.length,\n        completeTest: completeTest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } else return null;\n};\n_s(AltQuestionBox, \"p4KPg0MAUnZ4d62IdtJQdf5z6Z4=\", false, function () {\n  return [useDispatch];\n});\n_c = AltQuestionBox;\nexport default AltQuestionBox;\nvar _c;\n$RefreshReg$(_c, \"AltQuestionBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","addCorrect","addIncorrect","selectResultTally","selectFinalResults","Question","Footer","_","jsxDEV","_jsxDEV","Fragment","_Fragment","AltQuestionBox","props","_s","questionIdArray","filteredVerbs","displayQuestion","console","log","activeIndex","setActiveIndex","testComplete","setTestComplete","dispatch","handleAnswer","bool","id","current","completeTest","event","selectedVerb","activeId","find","el","children","verb","index","display","fileName","_jsxFileName","lineNumber","columnNumber","testLength","length","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/AltQuestionBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addCorrect, addIncorrect, selectResultTally, selectFinalResults } from '../app/verbsSlice';\n\nimport Question from './Question';\nimport Footer from './Footer';\n\nimport _ from 'lodash'\n\nconst AltQuestionBox = (props) => {\n   const {questionIdArray, filteredVerbs, displayQuestion} = props\n\n   console.log(questionIdArray)\n\n   const [activeIndex, setActiveIndex] = useState(0)\n   const [testComplete, setTestComplete] = useState(false)\n\n   const dispatch = useDispatch()\n\n   // const activeId = questionIdArray[activeIndex]\n\n\n   // const lastQuestion = useSelector(selectResultTally)\n   // const wrongAnswers = useSelector((state) => {\n   //    let wrong = state.verbs.questions.incorrectAnswers\n   //    let right = state.verbs.questions.correctAnswers\n   //    return `Right: ${right} // Wrong: ${wrong}`\n   //    // if (testComplete) return selectFinalResults\n   //    // else return null\n   // })\n\n   const handleAnswer = (bool, id) => {\n      if (bool) dispatch(addCorrect(id))   \n      else dispatch(addIncorrect(id))\n\n      setActiveIndex((current) => current + 1)\n      \n      // if (lastQuestion) completeTest()\n      // else setActiveId((current) => current + 1)\n   }\n\n   const completeTest = (event) => {\n      console.log('boop')\n      // event.preventDefault()\n      // setTestComplete(true)\n      // console.log(wrongAnswers)\n   }\n\n   const selectedVerb = (activeId) => { \n      return filteredVerbs.find(el => {\n         return el.id === activeId\n      }) \n   }\n\n   if (displayQuestion && !testComplete) {\n      const activeId = questionIdArray[activeIndex]\n      return (\n         <>\n            <div id='question-box'>\n               <Question verb={selectedVerb(activeId)} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n            </div>\n            <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n         </>\n      )\n   } else return null\n}\n\nexport default AltQuestionBox"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,mBAAmB;AAEnG,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAOC,CAAC,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtB,MAAMC,cAAc,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B,MAAM;IAACC,eAAe;IAAEC,aAAa;IAAEC;EAAe,CAAC,GAAGJ,KAAK;EAE/DK,OAAO,CAACC,GAAG,CAACJ,eAAe,CAAC;EAE5B,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAM4B,QAAQ,GAAGxB,WAAW,CAAC,CAAC;;EAE9B;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMyB,YAAY,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IAChC,IAAID,IAAI,EAAEF,QAAQ,CAACvB,UAAU,CAAC0B,EAAE,CAAC,CAAC,MAC7BH,QAAQ,CAACtB,YAAY,CAACyB,EAAE,CAAC,CAAC;IAE/BN,cAAc,CAAEO,OAAO,IAAKA,OAAO,GAAG,CAAC,CAAC;;IAExC;IACA;EACH,CAAC;EAED,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC7BZ,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB;IACA;IACA;EACH,CAAC;EAED,MAAMY,YAAY,GAAIC,QAAQ,IAAK;IAChC,OAAOhB,aAAa,CAACiB,IAAI,CAACC,EAAE,IAAI;MAC7B,OAAOA,EAAE,CAACP,EAAE,KAAKK,QAAQ;IAC5B,CAAC,CAAC;EACL,CAAC;EAED,IAAIf,eAAe,IAAI,CAACK,YAAY,EAAE;IACnC,MAAMU,QAAQ,GAAGjB,eAAe,CAACK,WAAW,CAAC;IAC7C,oBACGX,OAAA,CAAAE,SAAA;MAAAwB,QAAA,gBACG1B,OAAA;QAAKkB,EAAE,EAAC,cAAc;QAAAQ,QAAA,eACnB1B,OAAA,CAACJ,QAAQ;UAAC+B,IAAI,EAAEL,YAAY,CAACC,QAAQ,CAAE;UAACK,KAAK,EAAEjB,WAAY;UAACkB,OAAO,EAAE,IAAK;UAACb,YAAY,EAAEA;QAAa,GAAML,WAAW;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzH,CAAC,eACNjC,OAAA,CAACH,MAAM;QAAC0B,QAAQ,EAAEZ,WAAY;QAACuB,UAAU,EAAE5B,eAAe,CAAC6B,MAAO;QAACf,YAAY,EAAEA;MAAa;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAClG,CAAC;EAET,CAAC,MAAM,OAAO,IAAI;AACrB,CAAC;AAAA5B,EAAA,CAxDKF,cAAc;EAAA,QAQAZ,WAAW;AAAA;AAAA6C,EAAA,GARzBjC,cAAc;AA0DpB,eAAeA,cAAc;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}