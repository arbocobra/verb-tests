{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createVerbObject, filterSelectedVerbTense, shuffleVerbIds } from '../functions/loadingFunctions';\nconst initialState = {\n  isActive: false,\n  filteredVerbs: [],\n  tenseSelection: [],\n  questions: {\n    currentQuestion: null,\n    shuffledIds: [],\n    correctAnswers: [],\n    incorrectAnswers: []\n  }\n};\nexport const verbsSlice = createSlice({\n  name: 'verbs',\n  initialState: initialState,\n  reducers: {\n    startTest: (state, action) => {\n      let filters = action.payload;\n      let allVerbs = createVerbObject();\n      let filteredVerbs = filterSelectedVerbTense(filters, allVerbs);\n      let shuffledIds = shuffleVerbIds(filteredVerbs);\n      let firstQuestion = filteredVerbs.find(verb => verb.id === shuffledIds[0]);\n      state.tenseSelection = action.payload;\n      state.filteredVerbs = filteredVerbs;\n      state.questions.shuffledIds = shuffledIds;\n      state.questions.currentQuestion = firstQuestion;\n      state.isActive = true;\n    },\n    setQuestion: (state, action) => {\n      let questionId = action.payload;\n      let nextQuestion = state.filteredVerbs.find(verb => verb.id === questionId);\n      state.questions.currentQuestion = nextQuestion;\n    },\n    addCorrect: state => {\n      state.questions.correctAnswers.push(state.questions.currentQuestion.fullP);\n    },\n    addIncorrect: state => {\n      state.questions.incorrectAnswers.push(state.questions.currentQuestion.fullP);\n    },\n    endTest: state => {\n      return state.isActive = false;\n    },\n    resetTest: () => {\n      return initialState;\n    }\n  }\n});\nexport const selectFilteredVerbs = state => state.verbs.filteredVerbs;\nexport const selectShuffledIds = state => state.verbs.questions.shuffledIds;\nexport const selectNextQuestion = state => state.verbs.questions.currentQuestion;\nexport const selectFinalResults = state => state.verbs.questions.incorrectAnswers;\nexport const {\n  startTest,\n  setQuestion,\n  addCorrect,\n  addIncorrect,\n  resetTest\n} = verbsSlice.actions;\nexport default verbsSlice.reducer;","map":{"version":3,"names":["createSlice","createVerbObject","filterSelectedVerbTense","shuffleVerbIds","initialState","isActive","filteredVerbs","tenseSelection","questions","currentQuestion","shuffledIds","correctAnswers","incorrectAnswers","verbsSlice","name","reducers","startTest","state","action","filters","payload","allVerbs","firstQuestion","find","verb","id","setQuestion","questionId","nextQuestion","addCorrect","push","fullP","addIncorrect","endTest","resetTest","selectFilteredVerbs","verbs","selectShuffledIds","selectNextQuestion","selectFinalResults","actions","reducer"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/app/verbsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { createVerbObject, filterSelectedVerbTense, shuffleVerbIds } from '../functions/loadingFunctions';\n\nconst initialState = {\n  isActive: false,\n  filteredVerbs: [],\n  tenseSelection: [],\n  questions: {\n    currentQuestion: null,\n    shuffledIds: [],\n    correctAnswers: [],\n    incorrectAnswers: []\n  }\n }\n\nexport const verbsSlice = createSlice({\n   name: 'verbs',\n   initialState: initialState,\n   reducers: {\n      startTest: (state, action) => {\n        let filters = action.payload\n        let allVerbs = createVerbObject()\n        let filteredVerbs = filterSelectedVerbTense(filters, allVerbs)\n        let shuffledIds = shuffleVerbIds(filteredVerbs)\n        let firstQuestion = filteredVerbs.find(verb => verb.id === shuffledIds[0])\n\n        state.tenseSelection = action.payload\n        state.filteredVerbs = filteredVerbs\n        state.questions.shuffledIds = shuffledIds\n        state.questions.currentQuestion = firstQuestion\n        state.isActive = true\n      },\n      setQuestion: (state, action) => {\n        let questionId = action.payload\n        let nextQuestion = state.filteredVerbs.find(verb => verb.id === questionId)\n        state.questions.currentQuestion = nextQuestion\n      },\n      addCorrect: (state) => {\n        state.questions.correctAnswers.push(state.questions.currentQuestion.fullP)\n      },\n      addIncorrect: (state) => {\n        state.questions.incorrectAnswers.push(state.questions.currentQuestion.fullP)\n      },\n      endTest: (state) => {\n        return state.isActive = false\n      },\n      resetTest: () => {\n        return initialState\n      }\n   }\n})\n\nexport const selectFilteredVerbs = (state) => state.verbs.filteredVerbs\n\nexport const selectShuffledIds = (state) => state.verbs.questions.shuffledIds\n\nexport const selectNextQuestion = (state) => state.verbs.questions.currentQuestion\n\nexport const selectFinalResults = (state) => state.verbs.questions.incorrectAnswers\n\nexport const { startTest, setQuestion, addCorrect, addIncorrect, resetTest } = verbsSlice.actions;\n\nexport default verbsSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}