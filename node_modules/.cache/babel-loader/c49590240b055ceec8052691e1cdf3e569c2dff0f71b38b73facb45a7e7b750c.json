{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Selection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\n\n// import createVerbObject from '../functions/loadingFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Selection = props => {\n  _s();\n  const {\n    submitTense,\n    selectedTense,\n    setSelectedTense\n  } = props;\n  // const [selectedTense, setSelectedTense] = useState(['all'])\n  const [isAll, setIsAll] = useState(true);\n\n  // const dispatch = useDispatch();\n  // const allVerbs = useSelector(selectFilteredAllVerbs);\n\n  const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative']);\n  const isFirstRender = useRef(true);\n  const onFirstRender = () => isFirstRender.current = false;\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      console.log(isAll);\n      if (isAll) {\n        let divArr = document.getElementsByClassName('auto-checkbox');\n        for (let div of divArr) {\n          div.checked = false;\n        }\n      }\n    }\n  }, [isAll]);\n\n  // useEffect(() => {\n  //    if (!isFirstRender.current) {\n  //       console.log(selectedTense)\n  //    }\n  // }, [selectedTense])\n\n  useEffect(() => onFirstRender, []);\n  const checkHandler = e => {\n    let val = e.target.value;\n    let isSelected = e.target.checked;\n    let arr = [...selectedTense];\n    if (val === 'all') {\n      setIsAll(current => !current);\n      if (isSelected) setSelectedTense(['all']);else arr = [...arr].filter(el => el !== 'all');\n    } else {\n      if (isSelected) {\n        arr = [...arr].filter(el => el !== 'all');\n        arr.push(val);\n        setIsAll(false);\n      } else arr = [...arr].filter(el => el !== val);\n      setSelectedTense(arr);\n    }\n  };\n\n  // const submitTense = () => {\n  //    dispatch(selectTense(selectedTense))\n  //    document.getElementById('selection').classList.add('hidden')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"selection\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"tense0\",\n          value: \"all\",\n          onChange: checkHandler,\n          checked: isAll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"tense0\",\n          children: \" All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), tenseSelection.current.map((tense, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"tense-checkbox, auto-checkbox\",\n          type: \"checkbox\",\n          id: `tense${i + 1}`,\n          value: tense,\n          onChange: checkHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `tense${i}`,\n          children: [\" \", _.upperFirst(tense)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }, this)]\n      }, `checkbox${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 16\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"Ready\",\n          onClick: submitTense\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this);\n};\n_s(Selection, \"aBTOn6edqhBhe5OsliWeulkT5KM=\");\n_c = Selection;\nexport default Selection;\nvar _c;\n$RefreshReg$(_c, \"Selection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","loadData","selectTense","selectFilteredAllVerbs","jsxDEV","_jsxDEV","Selection","props","_s","submitTense","selectedTense","setSelectedTense","isAll","setIsAll","tenseSelection","isFirstRender","onFirstRender","current","console","log","divArr","document","getElementsByClassName","div","checked","checkHandler","e","val","target","value","isSelected","arr","filter","el","push","id","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","map","tense","i","className","upperFirst","onClick","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Selection.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash'\n\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\n\n// import createVerbObject from '../functions/loadingFunctions';\n\nconst Selection = (props) => {\n   const {submitTense, selectedTense, setSelectedTense} = props\n   // const [selectedTense, setSelectedTense] = useState(['all'])\n   const [isAll, setIsAll] = useState(true)\n\n   // const dispatch = useDispatch();\n   // const allVerbs = useSelector(selectFilteredAllVerbs);\n\n   const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative'])\n   \n   const isFirstRender = useRef(true)\n   const onFirstRender = () => isFirstRender.current = false\n\n   useEffect(() => {\n      if (!isFirstRender.current) {\n         console.log(isAll)\n         if (isAll) {\n            let divArr = document.getElementsByClassName('auto-checkbox')\n            for (let div of divArr) {\n               div.checked = false\n            }\n         }\n      }\n   }, [isAll])\n\n   // useEffect(() => {\n   //    if (!isFirstRender.current) {\n   //       console.log(selectedTense)\n   //    }\n   // }, [selectedTense])\n\n   useEffect(() => onFirstRender, []);\n\n   const checkHandler = (e) => {\n      let val = e.target.value\n      let isSelected = e.target.checked\n      let arr = [...selectedTense]\n\n      if (val === 'all') {\n         setIsAll(current => !current)\n         if (isSelected) setSelectedTense(['all'])\n         else arr = [...arr].filter(el => el !== 'all')         \n      } else {\n         if (isSelected) {\n            arr = [...arr].filter(el => el !== 'all')\n            arr.push(val)\n            setIsAll(false)\n         } else arr = [...arr].filter(el => el !== val)\n         setSelectedTense(arr)\n      }\n   }\n\n   // const submitTense = () => {\n   //    dispatch(selectTense(selectedTense))\n   //    document.getElementById('selection').classList.add('hidden')\n   // }\n\n   return (\n      <div id='selection'>\n         <form>\n            <div>\n               <input type='checkbox' id='tense0' value='all' onChange={checkHandler} checked={isAll} />\n               <label htmlFor='tense0'> All</label>\n            </div>\n            {tenseSelection.current.map((tense, i) => (\n               <div key={`checkbox${i}`}>\n                  <input className='tense-checkbox, auto-checkbox' type='checkbox' id={`tense${i + 1}`} value={tense} onChange={checkHandler} />\n                  <label htmlFor={`tense${i}`}> {_.upperFirst(tense)}</label>\n               </div>\n            ))}\n            <div><input type='button' value='Ready' onClick={submitTense} /></div>\n         </form>\n         {/* {Object.keys(allVerbs).map(el => (<p>{el}</p>))} */}\n      </div>\n   )\n}\n\nexport default Selection"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}