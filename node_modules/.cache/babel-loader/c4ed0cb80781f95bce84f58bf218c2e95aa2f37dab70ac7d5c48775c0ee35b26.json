{"ast":null,"code":"// counterReducer.js\nconst initialState = {\n  count: 0\n};\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'increment':\n      return {\n        count: state.count + 1\n      };\n    case 'decrement':\n      return {\n        count: state.count - 1\n      };\n    default:\n      return state;\n  }\n};\nexport default counterReducer;\nconst todosReducer = createReducer([], builder => {\n  builder.addCase('ADD_TODO', (state, action) => {\n    // \"mutate\" the array by calling push()\n    state.push(action.payload);\n  }).addCase('TOGGLE_TODO', (state, action) => {\n    const todo = state[action.payload.index];\n    // \"mutate\" the object by overwriting a field\n    todo.completed = !todo.completed;\n  }).addCase('REMOVE_TODO', (state, action) => {\n    // Can still return an immutably-updated value if we want to\n    return state.filter((todo, i) => i !== action.payload.index);\n  });\n});","map":{"version":3,"names":["initialState","count","counterReducer","state","action","type","todosReducer","createReducer","builder","addCase","push","payload","todo","index","completed","filter","i"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/app/counterReducer.js"],"sourcesContent":["// counterReducer.js\nconst initialState = { count: 0 };\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n\nconst todosReducer = createReducer([], (builder) => {\n  builder\n    .addCase('ADD_TODO', (state, action) => {\n      // \"mutate\" the array by calling push()\n      state.push(action.payload)\n    })\n    .addCase('TOGGLE_TODO', (state, action) => {\n      const todo = state[action.payload.index]\n      // \"mutate\" the object by overwriting a field\n      todo.completed = !todo.completed\n    })\n    .addCase('REMOVE_TODO', (state, action) => {\n      // Can still return an immutably-updated value if we want to\n      return state.filter((todo, i) => i !== action.payload.index)\n    })\n})"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EAAEC,KAAK,EAAE;AAAE,CAAC;AAEjC,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGH,YAAY,EAAEI,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QAAEJ,KAAK,EAAEE,KAAK,CAACF,KAAK,GAAG;MAAE,CAAC;IACnC,KAAK,WAAW;MACd,OAAO;QAAEA,KAAK,EAAEE,KAAK,CAACF,KAAK,GAAG;MAAE,CAAC;IACnC;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,cAAc;AAE7B,MAAMI,YAAY,GAAGC,aAAa,CAAC,EAAE,EAAGC,OAAO,IAAK;EAClDA,OAAO,CACJC,OAAO,CAAC,UAAU,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;IACtC;IACAD,KAAK,CAACO,IAAI,CAACN,MAAM,CAACO,OAAO,CAAC;EAC5B,CAAC,CAAC,CACDF,OAAO,CAAC,aAAa,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;IACzC,MAAMQ,IAAI,GAAGT,KAAK,CAACC,MAAM,CAACO,OAAO,CAACE,KAAK,CAAC;IACxC;IACAD,IAAI,CAACE,SAAS,GAAG,CAACF,IAAI,CAACE,SAAS;EAClC,CAAC,CAAC,CACDL,OAAO,CAAC,aAAa,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;IACzC;IACA,OAAOD,KAAK,CAACY,MAAM,CAAC,CAACH,IAAI,EAAEI,CAAC,KAAKA,CAAC,KAAKZ,MAAM,CAACO,OAAO,CAACE,KAAK,CAAC;EAC9D,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}