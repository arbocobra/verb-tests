{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createVerbObject, filterSelectedVerbTense, shuffleVerbIds } from '../functions/loadingFunctions';\nexport const verbsSlice = createSlice({\n  name: 'verbs',\n  initialState: {\n    isActive: false,\n    filteredVerbs: [],\n    tenseSelection: [],\n    questions: {\n      currentQuestion: null,\n      shuffledIds: [],\n      correctAnswers: [],\n      incorrectAnswers: []\n    }\n  },\n  reducers: {\n    startTest: (state, action) => {\n      let filters = action.payload;\n      let allVerbs = createVerbObject();\n      let filteredVerbs = filterSelectedVerbTense(filters, allVerbs);\n      let shuffledIds = shuffleVerbIds(filteredVerbs);\n      let firstQuestion = filteredVerbs.find(verb => verb.id === shuffledIds[0]);\n      state.tenseSelection = action.payload;\n      state.filteredVerbs = filteredVerbs;\n      state.questions.shuffledIds = shuffledIds;\n      state.questions.currentQuestion = firstQuestion;\n      state.isActive = true;\n    },\n    setQuestion: (state, action) => {\n      let questionId = action.payload;\n      let nextQuestion = state.filteredVerbs.find(verb => verb.id === questionId);\n      state.questions.currentQuestion = nextQuestion;\n    },\n    addCorrect: state => {\n      state.questions.correctAnswers.push(state.questions.currentQuestion.fullP);\n    },\n    addIncorrect: state => {\n      // id = action.payload\n      state.questions.incorrectAnswers.push(state.questions.currentQuestion.fullP);\n    },\n    endTest: state => state.isActive = false\n  }\n});\nexport const selectFilteredVerbs = state => {\n  const result = state.verbs.filteredVerbs;\n  // console.log(`selectFilteredVerbs: ${result}`)\n  return result;\n};\nexport const selectShuffledIds = state => {\n  const result = state.verbs.questions.shuffledIds;\n  // console.log(`selectShuffledIds: ${result}`)\n  return result;\n  // return state.verbs.questions.shuffledIds\n};\nexport const selectNextQuestion = state => state.verbs.questions.currentQuestion;\nexport const selectResultTally = state => {\n  let correctAnswers = state.verbs.questions.correctAnswers.length;\n  let incorrectAnswers = state.verbs.questions.incorrectAnswers.length;\n  let totalQuestions = state.verbs.questions.shuffledIds.length;\n  if (correctAnswers + incorrectAnswers === totalQuestions - 1) return true;else return false;\n};\nexport const selectFinalResults = state => state.verbs.questions.incorrectAnswers;\nexport const {\n  startTest,\n  setQuestion,\n  addCorrect,\n  addIncorrect\n} = verbsSlice.actions;\nexport default verbsSlice.reducer;","map":{"version":3,"names":["createSlice","createVerbObject","filterSelectedVerbTense","shuffleVerbIds","verbsSlice","name","initialState","isActive","filteredVerbs","tenseSelection","questions","currentQuestion","shuffledIds","correctAnswers","incorrectAnswers","reducers","startTest","state","action","filters","payload","allVerbs","firstQuestion","find","verb","id","setQuestion","questionId","nextQuestion","addCorrect","push","fullP","addIncorrect","endTest","selectFilteredVerbs","result","verbs","selectShuffledIds","selectNextQuestion","selectResultTally","length","totalQuestions","selectFinalResults","actions","reducer"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/app/verbsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { createVerbObject, filterSelectedVerbTense, shuffleVerbIds } from '../functions/loadingFunctions';\n\nexport const verbsSlice = createSlice({\n   name: 'verbs',\n   initialState: {\n    isActive: false,\n    filteredVerbs: [],\n    tenseSelection: [],\n    questions: {\n      currentQuestion: null,\n      shuffledIds: [],\n      correctAnswers: [],\n      incorrectAnswers: []\n    }\n   },\n   reducers: {\n      startTest: (state, action) => {\n        let filters = action.payload\n        let allVerbs = createVerbObject()\n        let filteredVerbs = filterSelectedVerbTense(filters, allVerbs)\n        let shuffledIds = shuffleVerbIds(filteredVerbs)\n        let firstQuestion = filteredVerbs.find(verb => verb.id === shuffledIds[0])\n\n        state.tenseSelection = action.payload\n        state.filteredVerbs = filteredVerbs\n        state.questions.shuffledIds = shuffledIds\n        state.questions.currentQuestion = firstQuestion\n        state.isActive = true\n      },\n      setQuestion: (state, action) => {\n        let questionId = action.payload\n        let nextQuestion = state.filteredVerbs.find(verb => verb.id === questionId)\n        state.questions.currentQuestion = nextQuestion\n      },\n      addCorrect: (state) => {\n        state.questions.correctAnswers.push(state.questions.currentQuestion.fullP)\n      },\n      addIncorrect: (state) => {\n        // id = action.payload\n        state.questions.incorrectAnswers.push(state.questions.currentQuestion.fullP)\n      },\n      endTest: (state) => state.isActive = false,\n   }\n})\n\nexport const selectFilteredVerbs = (state) => {\n  const result = state.verbs.filteredVerbs\n  // console.log(`selectFilteredVerbs: ${result}`)\n  return result\n}\n\nexport const selectShuffledIds = (state) => {\n  const result = state.verbs.questions.shuffledIds\n  // console.log(`selectShuffledIds: ${result}`)\n  return result\n  // return state.verbs.questions.shuffledIds\n}\n\nexport const selectNextQuestion = (state) => state.verbs.questions.currentQuestion\n\nexport const selectResultTally = (state) => {\n  let correctAnswers = state.verbs.questions.correctAnswers.length\n  let incorrectAnswers = state.verbs.questions.incorrectAnswers.length\n  let totalQuestions = state.verbs.questions.shuffledIds.length\n  if ((correctAnswers + incorrectAnswers) === totalQuestions - 1) return true\n  else return false\n}\n\nexport const selectFinalResults = (state) => state.verbs.questions.incorrectAnswers\n\nexport const { startTest, setQuestion, addCorrect, addIncorrect } = verbsSlice.actions;\n\nexport default verbsSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}