{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useSelector,useDispatch}from'react-redux';import _ from'lodash';import{startTest,selectFilteredAllVerbs}from'../app/verbsSlice';// import createVerbObject from '../functions/loadingFunctions';\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AltSelection=props=>{const{updatePage}=props;// const {submitTense, selectedTense, setSelectedTense} = props\nconst[selectedTense,setSelectedTense]=useState(['all']);const[isAll,setIsAll]=useState(true);const[submit,setSubmit]=useState(false);const isFirstRender=useRef(true);const selectButtonRef=useRef(null);const tenseSelection=useRef(['present','past','present continuous','past continuous','present perfect','past perfect','future perfect','imperfect','imperative']);const onFirstRender=()=>{isFirstRender.current=false;};const dispatch=useDispatch();// useEffect(() => {\n//    // let button = document.getElementById('button1')\n//    selectButtonRef.current.addEventListener('click', submitTense)\n// }, []); \nuseEffect(()=>selectButtonRef.current.addEventListener('click',submitTense),[]);useEffect(()=>{if(isAll&&!isFirstRender.current){let divArr=document.getElementsByClassName('auto-checkbox');for(let div of divArr){div.checked=false;}}},[isAll]);useEffect(()=>{if(submit&&!isFirstRender.current){dispatch(startTest(selectedTense));updatePage();}onFirstRender();},[submit]);const checkHandler=e=>{let val=e.target.value;let isSelected=e.target.checked;let arr=[...selectedTense];if(val==='all'){setIsAll(current=>!current);if(isSelected)setSelectedTense(['all']);else arr=[...arr].filter(el=>el!=='all');}else{if(isSelected){arr=[...arr].filter(el=>el!=='all');arr.push(val);setIsAll(false);}else arr=[...arr].filter(el=>el!==val);setSelectedTense(arr);}};const submitTense=event=>{event.preventDefault();setSubmit(true);};return/*#__PURE__*/_jsxs(\"div\",{id:\"selection\",className:\"selection-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"selection-input\",id:\"input-all\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"tense0\",value:\"all\",onChange:checkHandler,checked:isAll}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"tense0\",children:\" All\"})]}),tenseSelection.current.map((tense,i)=>/*#__PURE__*/_jsxs(\"div\",{id:\"input-\".concat(_.kebabCase(tense)),className:\"selection-input\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"tense-checkbox, auto-checkbox\",type:\"checkbox\",id:\"tense\".concat(i+1),value:tense,onChange:checkHandler}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"tense\".concat(i),children:[\" \",_.upperFirst(tense)]})]},\"checkbox\".concat(i))),/*#__PURE__*/_jsx(\"div\",{ref:selectButtonRef,className:\"button\",children:\"Begin Game\"})]});};export default AltSelection;","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","startTest","selectFilteredAllVerbs","jsx","_jsx","jsxs","_jsxs","AltSelection","props","updatePage","selectedTense","setSelectedTense","isAll","setIsAll","submit","setSubmit","isFirstRender","selectButtonRef","tenseSelection","onFirstRender","current","dispatch","addEventListener","submitTense","divArr","document","getElementsByClassName","div","checked","checkHandler","e","val","target","value","isSelected","arr","filter","el","push","event","preventDefault","id","className","children","type","onChange","htmlFor","map","tense","i","concat","kebabCase","upperFirst","ref"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/components/AltSelection.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash'\n\nimport { startTest, selectFilteredAllVerbs } from '../app/verbsSlice';\n\n// import createVerbObject from '../functions/loadingFunctions';\n\nconst AltSelection = (props) => {\n   const {updatePage} = props\n   // const {submitTense, selectedTense, setSelectedTense} = props\n   const [selectedTense, setSelectedTense] = useState(['all'])\n   const [isAll, setIsAll] = useState(true)\n   const [submit, setSubmit] = useState(false)\n\n   const isFirstRender = useRef(true)\n   const selectButtonRef = useRef(null)\n   const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative'])\n\n   \n   const onFirstRender = () => {\n      isFirstRender.current = false\n   }\n\n   const dispatch = useDispatch()\n\n   // useEffect(() => {\n   //    // let button = document.getElementById('button1')\n   //    selectButtonRef.current.addEventListener('click', submitTense)\n      \n   // }, []); \n\n   useEffect(() => selectButtonRef.current.addEventListener('click', submitTense), []);\n\n   useEffect(() => {\n      if (isAll && !isFirstRender.current) {\n         let divArr = document.getElementsByClassName('auto-checkbox')\n         for (let div of divArr) {\n            div.checked = false\n         }\n      }\n   }, [isAll])\n\n   useEffect(() => {\n      if (submit && !isFirstRender.current) {\n         dispatch(startTest(selectedTense))\n         updatePage()\n      }\n      onFirstRender()\n      }, [submit])\n   \n\n   const checkHandler = (e) => {\n      let val = e.target.value\n      let isSelected = e.target.checked\n      let arr = [...selectedTense]\n\n      if (val === 'all') {\n         setIsAll(current => !current)\n         if (isSelected) setSelectedTense(['all'])\n         else arr = [...arr].filter(el => el !== 'all')         \n      } else {\n         if (isSelected) {\n            arr = [...arr].filter(el => el !== 'all')\n            arr.push(val)\n            setIsAll(false)\n         } else arr = [...arr].filter(el => el !== val)\n         setSelectedTense(arr)\n      }\n   }\n\n   const submitTense = (event) => {\n      event.preventDefault()\n      setSubmit(true)\n   }\n\n   return (\n      <div id='selection' className='selection-container'>\n         {/* <form> */}\n            <div className='selection-input' id='input-all'>\n               <input type='checkbox' id='tense0' value='all' onChange={checkHandler} checked={isAll} />\n               <label htmlFor='tense0'> All</label>\n            </div>\n            {tenseSelection.current.map((tense, i) => (\n               <div id={`input-${_.kebabCase(tense)}`} className='selection-input' key={`checkbox${i}`}>\n                  <input className='tense-checkbox, auto-checkbox' type='checkbox' id={`tense${i + 1}`} value={tense} onChange={checkHandler} />\n                  <label htmlFor={`tense${i}`}> {_.upperFirst(tense)}</label>\n               </div>\n            ))}\n            <div ref={selectButtonRef} className='button'>Begin Game</div>\n      </div>\n   )\n}\n\nexport default AltSelection"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}