{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/components/AltQuestionBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectShuffledIds, selectNextQuestion, setQuestion, addCorrect, addIncorrect, selectResultTally, selectFinalResults } from '../app/verbsSlice';\nimport Question from './Question';\nimport AltQuestion from './AltQuestion';\nimport Results from './Results';\nimport Footer from './Footer';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AltQuestionBox = props => {\n  _s();\n  const {\n    setDisplayQuestion\n  } = props;\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [testActive, setTestActive] = useState(true);\n  const finalQuestion = useRef(false);\n  const dispatch = useDispatch();\n  const currentQuestion = useSelector(selectNextQuestion);\n  const questionIdArray = useSelector(selectShuffledIds);\n  useEffect(() => {\n    if (activeIndex === questionIdArray.length - 1) finalQuestion.current = true;\n  }, [activeIndex]);\n  const handleAnswer = (bool, id) => {\n    if (bool) dispatch(addCorrect());else dispatch(addIncorrect());\n    dispatch(setQuestion(questionIdArray[activeIndex + 1]));\n    if (finalQuestion.current) completeTest();else setActiveIndex(current => current + 1);\n  };\n  const completeTest = event => {\n    setTestActive(false);\n    finalQuestion.current = false;\n  };\n  if (testActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"test\",\n      className: \"test-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"question-box\",\n        children: /*#__PURE__*/_jsxDEV(AltQuestion, {\n          verb: currentQuestion,\n          index: activeIndex,\n          display: true,\n          handleAnswer: handleAnswer\n        }, activeIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        activeId: activeIndex,\n        testLength: questionIdArray.length,\n        completeTest: completeTest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Results, {\n      totalQuestions: activeIndex,\n      setDisplayQuestion: setDisplayQuestion,\n      setTestActive: setTestActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 14\n    }, this);\n  }\n  // return (\n  //    <div id='test' className='test-container'>\n  //       {/* { if (testActive) (\n  //          <div id='question-box'>\n  //             <AltQuestion verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n  //          </div>)\n  //       } */}\n  //       { testActive ? displayQuestion : displayResults}\n  //       <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n  //    </div>\n  // )\n};\n_s(AltQuestionBox, \"8Lf97FFFa3x+FzgxT7STNGgqErE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = AltQuestionBox;\nexport default AltQuestionBox;\nvar _c;\n$RefreshReg$(_c, \"AltQuestionBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","selectShuffledIds","selectNextQuestion","setQuestion","addCorrect","addIncorrect","selectResultTally","selectFinalResults","Question","AltQuestion","Results","Footer","_","jsxDEV","_jsxDEV","AltQuestionBox","props","_s","setDisplayQuestion","activeIndex","setActiveIndex","testActive","setTestActive","finalQuestion","dispatch","currentQuestion","questionIdArray","length","current","handleAnswer","bool","id","completeTest","event","className","children","verb","index","display","fileName","_jsxFileName","lineNumber","columnNumber","activeId","testLength","totalQuestions","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/components/AltQuestionBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectShuffledIds, selectNextQuestion, setQuestion, addCorrect, addIncorrect, selectResultTally, selectFinalResults } from '../app/verbsSlice';\n\nimport Question from './Question';\nimport AltQuestion from './AltQuestion';\nimport Results from './Results';\nimport Footer from './Footer';\n\nimport _ from 'lodash'\n\nconst AltQuestionBox = (props) => {\n   const { setDisplayQuestion } = props\n\n   const [activeIndex, setActiveIndex] = useState(0)\n   const [testActive, setTestActive] = useState(true)\n   const finalQuestion = useRef(false)\n\n   const dispatch = useDispatch()\n\n   const currentQuestion = useSelector(selectNextQuestion)\n   const questionIdArray = useSelector(selectShuffledIds)\n\n   useEffect(() => {\n      if (activeIndex === questionIdArray.length - 1) finalQuestion.current = true\n   }, [activeIndex])\n\n\n   const handleAnswer = (bool, id) => {\n      if (bool) dispatch(addCorrect())   \n      else dispatch(addIncorrect())\n\n      dispatch(setQuestion(questionIdArray[activeIndex + 1]))\n      \n      if (finalQuestion.current) completeTest()\n      else setActiveIndex((current) => current + 1)\n   }\n\n   const completeTest = (event) => {\n      setTestActive(false)\n      finalQuestion.current = false\n\n   }\n\n   if (testActive) {\n      return (\n      <div id='test' className='test-container'>\n         <div id='question-box'>\n            <AltQuestion verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n         </div> \n         <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n      </div>\n   )} else {\n      return <Results totalQuestions={activeIndex} setDisplayQuestion={setDisplayQuestion} setTestActive={setTestActive} />\n   }\n   // return (\n   //    <div id='test' className='test-container'>\n   //       {/* { if (testActive) (\n   //          <div id='question-box'>\n   //             <AltQuestion verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n   //          </div>)\n   //       } */}\n   //       { testActive ? displayQuestion : displayResults}\n   //       <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n   //    </div>\n   // )\n}\n\nexport default AltQuestionBox"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}