{"ast":null,"code":"var _jsxFileName = \"/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Verbs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\nimport createVerbObject from '../functions/loadingFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Verbs = () => {\n  _s();\n  const allVerbs = useSelector(selectFilteredAllVerbs);\n  const dispatch = useDispatch();\n  const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative']);\n  const isFirstRender = useRef(true);\n  const [selectedTense, setSelectedTense] = useState(['all']);\n  const [isAll, setIsAll] = useState(true);\n  const onFirstRender = () => {\n    // console.log('something dispatched')\n    dispatch(loadData(createVerbObject()));\n    isFirstRender.current = false;\n  };\n\n  // useEffect(() => {\n  //    // console.log('FR useEffect: isALL = ' + isAll + ' FR = ' + isFirstRender.current)\n  //    if (!isFirstRender.current) {\n  //       // console.log('NOT FR useEffect: isALL = ' + isAll + ' FR = ' + isFirstRender.current)\n  //       // console.log(isAll)\n  //       if (isAll) {\n  //          console.log('boop')\n  //          let divArr = document.getElementsByClassName('auto-checkbox')\n  //          for (let div of divArr) {\n  //             div.checked = false\n  //          }\n  //       }\n  //    }\n  // }, [isAll])\n\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      console.log(selectedTense);\n    }\n  }, [selectedTense]);\n  useEffect(onFirstRender, []);\n  const checkHandler = e => {\n    let val = e.target.value;\n    let isSelected = e.target.checked;\n    let arr = [...selectedTense];\n    if (val === 'all') {\n      setIsAll(current => !current);\n      if (isSelected) setSelectedTense('all');else arr = [...arr].filter(el => el !== val);\n    } else {\n      if (isSelected) {\n        arr.push(val);\n        setIsAll(false);\n      } else arr = [...arr].filter(el => el !== val);\n    }\n    // arr = [...arr].filter(el => el !== val)\n    setSelectedTense(arr);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Hello there!\", /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"tense0\",\n          value: \"all\",\n          onChange: checkHandler,\n          checked: isAll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"tense0\",\n          children: \" All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), tenseSelection.current.map((tense, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"tense-checkbox, auto-checkbox\",\n          type: \"checkbox\",\n          id: `tense${i + 1}`,\n          value: tense,\n          onChange: checkHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `tense${i}`,\n          children: [\" \", _.upperFirst(tense)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 19\n        }, this)]\n      }, `checkbox${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 16\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 7\n  }, this);\n};\n_s(Verbs, \"sjJzU20QJ8bBXm/sZnqy9zCyIP4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Verbs;\nexport default Verbs;\nvar _c;\n$RefreshReg$(_c, \"Verbs\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","_","loadData","selectTense","selectFilteredAllVerbs","createVerbObject","jsxDEV","_jsxDEV","Verbs","_s","allVerbs","dispatch","tenseSelection","isFirstRender","selectedTense","setSelectedTense","isAll","setIsAll","onFirstRender","current","console","log","checkHandler","e","val","target","value","isSelected","checked","arr","filter","el","push","children","type","id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","map","tense","i","className","upperFirst","_c","$RefreshReg$"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/src/components/Verbs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash'\n\nimport { loadData, selectTense, selectFilteredAllVerbs } from '../app/verbsSlice';\n\nimport createVerbObject from '../functions/loadingFunctions';\n\nconst Verbs = () => {\n\n   const allVerbs = useSelector(selectFilteredAllVerbs);\n   const dispatch = useDispatch();\n\n   const tenseSelection = useRef(['present', 'past', 'present continuous', 'past continuous', 'present perfect', 'past perfect', 'future perfect', 'imperfect', 'imperative'])\n   const isFirstRender = useRef(true)\n   const [selectedTense, setSelectedTense] = useState(['all'])\n   const [isAll, setIsAll] = useState(true)\n \n   const onFirstRender = () => {\n      // console.log('something dispatched')\n      dispatch(loadData(createVerbObject()));\n      isFirstRender.current = false\n   }\n\n   // useEffect(() => {\n   //    // console.log('FR useEffect: isALL = ' + isAll + ' FR = ' + isFirstRender.current)\n   //    if (!isFirstRender.current) {\n   //       // console.log('NOT FR useEffect: isALL = ' + isAll + ' FR = ' + isFirstRender.current)\n   //       // console.log(isAll)\n   //       if (isAll) {\n   //          console.log('boop')\n   //          let divArr = document.getElementsByClassName('auto-checkbox')\n   //          for (let div of divArr) {\n   //             div.checked = false\n   //          }\n   //       }\n   //    }\n   // }, [isAll])\n\n   useEffect(() => {\n      if (!isFirstRender.current) {\n         console.log(selectedTense)\n      }\n   }, [selectedTense])\n\n   useEffect(onFirstRender, []);\n\n   const checkHandler = (e) => {\n      let val = e.target.value\n      let isSelected = e.target.checked\n      let arr = [...selectedTense]\n\n      if (val === 'all') {\n         setIsAll(current => !current)\n         if (isSelected) setSelectedTense('all')\n         else arr = [...arr].filter(el => el !== val)         \n      } else {\n         if (isSelected) {\n            arr.push(val)\n            setIsAll(false)\n         } else arr = [...arr].filter(el => el !== val)\n      }\n      // arr = [...arr].filter(el => el !== val)\n      setSelectedTense(arr)\n   }\n\n   return (\n      <div>\n         Hello there!\n         <form>\n            <div>\n               <input type='checkbox' id='tense0' value='all' onChange={checkHandler} checked={isAll} />\n               <label htmlFor='tense0'> All</label>\n            </div>\n            {tenseSelection.current.map((tense, i) => (\n               <div key={`checkbox${i}`}>\n                  <input className='tense-checkbox, auto-checkbox' type='checkbox' id={`tense${i + 1}`} value={tense} onChange={checkHandler} />\n                  <label htmlFor={`tense${i}`}> {_.upperFirst(tense)}</label>\n               </div>\n            ))}\n            {/* <div><input type='button' value='Ready' onClick='' /></div> */}\n         </form>\n         {/* {Object.keys(allVerbs).map(el => (<p>{el}</p>))} */}\n      </div>\n   )\n}\n\nexport default Verbs"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}