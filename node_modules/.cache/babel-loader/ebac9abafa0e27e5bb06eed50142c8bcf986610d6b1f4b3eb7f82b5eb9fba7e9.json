{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useSelector,useDispatch}from'react-redux';import{selectShuffledIds,selectNextQuestion,setQuestion,addCorrect,addIncorrect}from'../app/verbsSlice';import Question from'./Question';import Results from'./Results';import Footer from'./Footer';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TestContainer=props=>{const{setDisplayQuestion}=props;const[activeIndex,setActiveIndex]=useState(0);const[testActive,setTestActive]=useState(true);const finalQuestion=useRef(false);const dispatch=useDispatch();const currentQuestion=useSelector(selectNextQuestion);const questionIdArray=useSelector(selectShuffledIds);useEffect(()=>{if(activeIndex===questionIdArray.length-1)finalQuestion.current=true;},[activeIndex]);const handleAnswer=bool=>{if(bool)dispatch(addCorrect());else dispatch(addIncorrect());dispatch(setQuestion(questionIdArray[activeIndex+1]));if(finalQuestion.current)completeTest();else setActiveIndex(current=>current+1);};const completeTest=()=>{setTestActive(false);finalQuestion.current=false;};if(testActive){return/*#__PURE__*/_jsxs(\"div\",{id:\"test\",className:\"test-container\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"question-box\",children:/*#__PURE__*/_jsx(Question,{verb:currentQuestion,index:activeIndex,display:true,handleAnswer:handleAnswer},activeIndex)}),/*#__PURE__*/_jsx(Footer,{activeId:activeIndex,testLength:questionIdArray.length,completeTest:completeTest})]});}else{return/*#__PURE__*/_jsx(Results,{totalQuestions:activeIndex,setDisplayQuestion:setDisplayQuestion,setTestActive:setTestActive});}};export default TestContainer;","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","useDispatch","selectShuffledIds","selectNextQuestion","setQuestion","addCorrect","addIncorrect","Question","Results","Footer","jsx","_jsx","jsxs","_jsxs","TestContainer","props","setDisplayQuestion","activeIndex","setActiveIndex","testActive","setTestActive","finalQuestion","dispatch","currentQuestion","questionIdArray","length","current","handleAnswer","bool","completeTest","id","className","children","verb","index","display","activeId","testLength","totalQuestions"],"sources":["/Users/natalierekai/Documents/Developer/portuguese-verbs/verb-tests/src/components/TestContainer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectShuffledIds, selectNextQuestion, setQuestion, addCorrect, addIncorrect } from '../app/verbsSlice';\n\nimport Question from './Question';\nimport Results from './Results';\nimport Footer from './Footer';\n\n\nconst TestContainer = (props) => {\n   const { setDisplayQuestion } = props\n\n   const [activeIndex, setActiveIndex] = useState(0)\n   const [testActive, setTestActive] = useState(true)\n   const finalQuestion = useRef(false)\n\n   const dispatch = useDispatch()\n\n   const currentQuestion = useSelector(selectNextQuestion)\n   const questionIdArray = useSelector(selectShuffledIds)\n\n   useEffect(() => {\n      if (activeIndex === questionIdArray.length - 1) finalQuestion.current = true\n   }, [activeIndex])\n\n\n   const handleAnswer = (bool) => {\n      if (bool) dispatch(addCorrect())   \n      else dispatch(addIncorrect())\n\n      dispatch(setQuestion(questionIdArray[activeIndex + 1]))\n      \n      if (finalQuestion.current) completeTest()\n      else setActiveIndex((current) => current + 1)\n   }\n\n   const completeTest = () => {\n      setTestActive(false)\n      finalQuestion.current = false\n\n   }\n\n   if (testActive) {\n      return (\n      <div id='test' className='test-container'>\n         <div id='question-box'>\n            <Question verb={currentQuestion} index={activeIndex} display={true} handleAnswer={handleAnswer} key={activeIndex} />\n         </div> \n         <Footer activeId={activeIndex} testLength={questionIdArray.length} completeTest={completeTest} />\n      </div>\n   )} else {\n      return <Results totalQuestions={activeIndex} setDisplayQuestion={setDisplayQuestion} setTestActive={setTestActive} />\n   }\n}\n\nexport default TestContainer"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,iBAAiB,CAAEC,kBAAkB,CAAEC,WAAW,CAAEC,UAAU,CAAEC,YAAY,KAAQ,mBAAmB,CAEhH,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,OAAO,KAAM,WAAW,CAC/B,MAAO,CAAAC,MAAM,KAAM,UAAU,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAG9B,KAAM,CAAAC,aAAa,CAAIC,KAAK,EAAK,CAC9B,KAAM,CAAEC,kBAAmB,CAAC,CAAGD,KAAK,CAEpC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGrB,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAACsB,UAAU,CAAEC,aAAa,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAAAwB,aAAa,CAAGtB,MAAM,CAAC,KAAK,CAAC,CAEnC,KAAM,CAAAuB,QAAQ,CAAGrB,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAsB,eAAe,CAAGvB,WAAW,CAACG,kBAAkB,CAAC,CACvD,KAAM,CAAAqB,eAAe,CAAGxB,WAAW,CAACE,iBAAiB,CAAC,CAEtDJ,SAAS,CAAC,IAAM,CACb,GAAImB,WAAW,GAAKO,eAAe,CAACC,MAAM,CAAG,CAAC,CAAEJ,aAAa,CAACK,OAAO,CAAG,IAAI,CAC/E,CAAC,CAAE,CAACT,WAAW,CAAC,CAAC,CAGjB,KAAM,CAAAU,YAAY,CAAIC,IAAI,EAAK,CAC5B,GAAIA,IAAI,CAAEN,QAAQ,CAACjB,UAAU,CAAC,CAAC,CAAC,KAC3B,CAAAiB,QAAQ,CAAChB,YAAY,CAAC,CAAC,CAAC,CAE7BgB,QAAQ,CAAClB,WAAW,CAACoB,eAAe,CAACP,WAAW,CAAG,CAAC,CAAC,CAAC,CAAC,CAEvD,GAAII,aAAa,CAACK,OAAO,CAAEG,YAAY,CAAC,CAAC,KACpC,CAAAX,cAAc,CAAEQ,OAAO,EAAKA,OAAO,CAAG,CAAC,CAAC,CAChD,CAAC,CAED,KAAM,CAAAG,YAAY,CAAGA,CAAA,GAAM,CACxBT,aAAa,CAAC,KAAK,CAAC,CACpBC,aAAa,CAACK,OAAO,CAAG,KAAK,CAEhC,CAAC,CAED,GAAIP,UAAU,CAAE,CACb,mBACAN,KAAA,QAAKiB,EAAE,CAAC,MAAM,CAACC,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eACtCrB,IAAA,QAAKmB,EAAE,CAAC,cAAc,CAAAE,QAAA,cACnBrB,IAAA,CAACJ,QAAQ,EAAC0B,IAAI,CAAEV,eAAgB,CAACW,KAAK,CAAEjB,WAAY,CAACkB,OAAO,CAAE,IAAK,CAACR,YAAY,CAAEA,YAAa,EAAMV,WAAc,CAAC,CAClH,CAAC,cACNN,IAAA,CAACF,MAAM,EAAC2B,QAAQ,CAAEnB,WAAY,CAACoB,UAAU,CAAEb,eAAe,CAACC,MAAO,CAACI,YAAY,CAAEA,YAAa,CAAE,CAAC,EAC/F,CAAC,CACR,CAAC,IAAM,CACL,mBAAOlB,IAAA,CAACH,OAAO,EAAC8B,cAAc,CAAErB,WAAY,CAACD,kBAAkB,CAAEA,kBAAmB,CAACI,aAAa,CAAEA,aAAc,CAAE,CAAC,CACxH,CACH,CAAC,CAED,cAAe,CAAAN,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}